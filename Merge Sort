 /* step 1: start
step 2: declare array and left, right, mid variable 
step 3: perform merge function.
        mergesort(array,left,right)
        mergesort (array, left, right)
        if left > right
        return
        mid= (left+right)/2
        mergesort(array, left, mid)
        mergesort(array, mid+1, right)
        merge(array, left, mid, right)
step 4: Stop
*/
   void merge(int arr[], int l, int m, int r)
    {
     
         int low=l,high=m+1,mid=m;
         vector<int> temp;
         while(low<=mid && high<=r){
             if(arr[low]<=arr[high]) {
                 temp.push_back(arr[low]);
                 low++;
                 
             }
             else {
                 temp.push_back(arr[high]);
                 high++;
             }
         }
         while(low<=mid){
             temp.push_back(arr[low]);
             low++;
         }
         while(high<=r){
             temp.push_back(arr[high]);
             high++;
         }
         for(int i=l;i<=r;i++){
             arr[i] = temp[i-l];
         }
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        if(l==r) return;
        int mid = (l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
